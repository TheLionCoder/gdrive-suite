{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Gdrive-Suite","text":"<p>GDrive Suite is a robust Python library designed to streamline interaction with Google Drive and Google Sheets. It provides an intuitive, high-level interface over the official Google APIs, handling authentication, token management, and API calls so you can focus on your data workflows.</p> <p>Whether you're a data engineer building ETL pipelines, a data analyst fetching the latest reports, or a data scientist accessing datasets, GDrive Suite simplifies cloud file management.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Seamless Authentication: Handles Oauth2 flow and token refreshing automatically,   supporting both local server environments (via Application Default Credentials).</li> <li>File Operations: Easily download, upload, and list files and folders.</li> <li>Google Workspace Conversion: automatically convert Google Docs, Sheets,   and slices to formats like <code>.doc</code>, <code>.xlsx</code>, <code>.pdf</code> on download.</li> <li>Path-Based Navigation: Find files and folders using familiar directory   paths (e.g., <code>reports/2025/some_month</code>).</li> <li>Direct Data Retrieval: Pull data directly from Google Sheets into your   python environment.</li> <li>In-Memory File Handling: Retrieve file content directly into a <code>BytesIO</code>   object for in-memory processing without writing to disk.</li> </ul>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#installation","title":"Installation","text":"<p>Install <code>gdrive-suite</code> directly from PyPi. The library requires Python 3.11 or higher.</p> <pre><code>pip install gdrive-suite\n</code></pre>"},{"location":"getting_started/#configuration","title":"Configuration","text":"<p>To use GDrive Suite, you need to enable the Google Drive API and obtain credentials for your application.</p> <ol> <li> <p>Enable the Google Drive API</p> </li> <li> <p>Go to the Google Cloud Console.</p> </li> <li> <p>Create a new project or select an existing one.</p> </li> <li> <p>In the navigation menu, go to APIs &amp; Services &gt; Library.</p> </li> <li> <p>Search for \"Google Drive API\" and \"Google Sheets API\" and enable both.</p> </li> <li> <p>Create Credentials</p> </li> <li> <p>In the navigation menu, go to APIs &amp; Services &gt; Credentials.</p> </li> <li> <p>Click Create Credentials &gt; OAuth client ID.</p> </li> <li> <p>Select Desktop app as the application type.</p> </li> <li> <p>Give the client ID a name (e.g., \"GDrive Suite Client\") and click Create.</p> </li> <li> <p>A window will appear. Click Download JSON to download the credentials file.</p> </li> <li> <p>Set Up Your Project</p> </li> <li> <p>Rename the downloaded JSON file to google_credentials.json.</p> </li> <li> <p>In your project, create a directory to store this file. We recommend conf/local.</p> </li> <li> <p>Place the google_credentials.json file in this directory.</p> </li> </ol> <p>Your project structure should look like this:o use Gdrive Suite you need to enable</p> <pre><code>- Place credentials in `conf/local`\n\n```bash\n\u251c\u2500\u2500 conf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 local\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 credentials.json\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 script.py\n</code></pre> <p>The first time you run your application, you will be prompted to authorize it via a browser window. A <code>google_token.json</code> file will then be created in the same directory. This token will be automatically refreshed as needed.</p>"},{"location":"API/api_reference/","title":"API Reference","text":"<p>This page provides a detailed API reference for the <code>gdrive-suite</code> library, automatically generated from the source code doc-strings.</p>"},{"location":"API/api_reference/#main-client","title":"Main Client","text":"<p>The primary interface for interacting with Google Drive and Sheets.</p>"},{"location":"API/api_reference/#gdrive_suite.drive.gdrive_client.GDriveClient","title":"<code>gdrive_suite.drive.gdrive_client.GDriveClient</code>","text":"<p>Provides functionality to: - Download files from Google Drive with or without conversion - Upload files to Google Drive - Retrieve Google Sheets data</p> Source code in <code>src/gdrive_suite/drive/gdrive_client.py</code> <pre><code>class GDriveClient:\n    \"\"\"\n    Provides functionality to:\n    - Download files from Google Drive with or without conversion\n    - Upload files to Google Drive\n    - Retrieve Google Sheets data\n    \"\"\"\n\n    def __init__(self, drive_config_manager: GDriveClientConfig):\n        \"\"\"Initializes the GdriveService\n        :param drive_config_manager: A ConfigManager that provides\n         Outh2 credentials.\n        \"\"\"\n        try:\n            self._credentials: Optional[Credentials] = (\n                drive_config_manager.get_credentials()\n            )\n            self.drive_service: Any = build(\n                \"drive\", version=\"v3\", credentials=self._credentials\n            )\n            self._sheets_service: Any = build(\n                serviceName=\"sheets\", version=\"v4\", credentials=self._credentials\n            )\n\n        except RefreshError as e:\n            raise GDriveAuthError(\n                f\"Failed to refres credentials. please re-authenticate. Details: {e}\"\n            ) from e\n\n        except Exception as e:\n            raise RuntimeError(f\"Failed to initialize Google API services: {e}\") from e\n\n    def download_file(self, target: DownloadTarget) -&gt; None:\n        \"\"\"Download a file from Google Drive.\n\n        Args:\n            target: A `DownloadTarget` object specifyng what a download and\n                where to save it.\n        Raises:\n            APIError: If the download fails due to a Google API error.\n            IOError: For local file system errors.\n        \"\"\"\n        if target.destination_path.parent:\n            target.destination_path.parent.mkdir(parents=True, exist_ok=True)\n\n        try:\n            request = (\n                self.drive_service.files().export_media(\n                    fileId=target.file_id, mimeType=target.mime_type\n                )\n                if target.mime_type\n                else self.drive_service.files().get_media(fileId=target.file_id)\n            )\n            with open(target.destination_path, \"wb\") as file_writer:\n                downloader: MediaIoBaseDownload = MediaIoBaseDownload(\n                    fd=file_writer, request=request\n                )\n                _execute_download(downloader)\n\n        except HttpError as e:\n            raise APIError(\n                f\"Failed to download file '{target.destination_path.name}' (ID: {target.file_id}).\"\n                f\"Reason: {e.resp.status} {e.resp.reason}\"\n            ) from e\n        except IOError as e:\n            raise IOError(\n                f\"An expected error ocurred while downloading '{target.destination_path.name}': {e}\"\n            ) from e\n\n    def retrieve_file_content(self, file_id: str) -&gt; io.BytesIO:\n        \"\"\"Retrieve a file from Google Drive as BytesIO object\n        Args\n         file_id: Google ID of the file to get retrieve_file_content.\n\n         Return:\n         BytesIO object containing the file content\n\n         Raises:\n           APIError: If the retrieve fials due to Google API error.\n           IOError: For local file system errors.\n        \"\"\"\n        try:\n            request = self.drive_service.files().get_media(fileId=file_id)\n            file_content: io.BytesIO = io.BytesIO()\n            downloader: MediaIoBaseDownload = MediaIoBaseDownload(\n                fd=file_content, request=request\n            )\n\n            _execute_download(downloader)\n            file_content.seek(0)\n            return file_content\n\n        except HttpError as e:\n            raise APIError(\n                f\"Failed to retrieve file content for '{file_id}'. \"\n                f\"Reason: {e.resp.status} {e.resp.reason}\"\n            ) from e\n        except IOError as e:\n            raise IOError(\n                f\"An unexpected error ocurred while retrieving content \"\n                f\"for file ID: '{file_id}': {e}\"\n            )\n\n    def retrieve_sheet_data(\n        self, spreadsheet_id: str, sheet_range: str\n    ) -&gt; List[List[Any]]:\n        \"\"\"Read data from a Google sheet\n        Args:\n             spreadsheet_id: ID for the Google sheet\n             sheet_range: Range of cells to read (e.j., A1: Z90)\n\n        Returns:\n            List of rows containing cell values\n\n        Raises:\n            APIError: If retrieving data fails due to a Google API error.\n        \"\"\"\n        try:\n            result = (\n                self._sheets_service.spreadsheets()\n                .values()\n                .get(spreadsheetId=spreadsheet_id, range=sheet_range)\n                .execute()\n            )\n            return result.get(\"values\", [])\n\n        except HttpError as e:\n            raise APIError(\n                f\"Failed to retrieve data from sheet '{spreadsheet_id}'. \"\n                f\"Reason: {e.resp.status} {e.resp.reason}\"\n            ) from e\n\n    def upload_file(self, file_path: Path, folder_id: str, **metadata: Any) -&gt; str:\n        \"\"\"Upload file to Google Drive\n\n        Args:\n             file_path: Path to the file to the upload\n             folder_id: ID of the folder to upload to\n             metadata: Additional metadata to add the file\n\n        Raises:\n            APIError: If upload fails due to Google API error.\n            IOError: For local file system errors.\n        \"\"\"\n        if not file_path.is_file():\n            raise FileNotFoundError(f\"The specific file does not exist: {file_path}\")\n\n        try:\n            file_metadata = {\"name\": file_path.name, \"parents\": [folder_id], **metadata}\n            media: MediaFileUpload = MediaFileUpload(str(file_path), resumable=True)\n            response = (\n                self.drive_service.files()\n                .create(body=file_metadata, media_body=media, fields=\"id\")\n                .execute()\n            )\n            return response.get(\"id\")\n        except HttpError as e:\n            raise APIError(\n                f\"Failed to upload file {file_path.name}. \"\n                f\"Reason: {e.resp.status} {e.reason}\"\n            ) from e\n        except IOError as e:\n            raise IOError(\n                f\"An unexpected error ocurred during the upload \"\n                f\"of '{file_path.name}': {e}\"\n            ) from e\n\n    def list_files(self, query: str, **list_params: Any) -&gt; List[Dict[str, Any]]:\n        \"\"\"Helper function to list files in Google Drive\n        Args:\n         query: A query for filtering results. See \"Search for files\"\n         guide for support syntax.\n         list_params: Additional parameters for listing files.\n         Return:\n         List of searches files.\n\n         Raises:\n           APIError: If the list files fails due to Google API error.\n        \"\"\"\n        all_files: List[Dict[str, Any]] = []\n        page_token: Optional[str] = None\n        try:\n            while True:\n                response: Any = (\n                    self.drive_service.files()\n                    .list(\n                        spaces=\"drive\",\n                        q=query,\n                        pageToken=page_token,\n                        corpora=\"user\",\n                        fields=\"nextPageToken, files(id, name, parents, mime)\",\n                        **list_params,\n                    )\n                    .execute()\n                )\n                all_files.extend(response.get(\"files\", []))\n                page_token = response.get(\"nextPageToken\", None)\n\n                if page_token is None:\n                    break\n            return all_files\n        except HttpError as e:\n            raise APIError(\n                f\"Failed to list files with query '{query}'. \"\n                f\"HTTP Error: {e.resp.status} {e.resp.reason}\"\n            )\n\n    def find_folder_id_by_path(\n        self, start_folder_id: str, path_segments: List[str]\n    ) -&gt; Optional[str]:\n        \"\"\"\n        Find a folder's ID by navigating a path of folder names.\n        Args:\n            start_folder_id: The ID of the folder to start from.\n            path_segments: A list of folder names to navigate.\n        Return:\n          The ID of the folder.\n        \"\"\"\n        current_folder_id: str = start_folder_id\n        for segment in path_segments:\n            query: str = f\"'{current_folder_id}' in parents and \"\n            \"mimeType='application/vnd.google-apps.folder' and \"\n            f\"name='{segment}' and trashed=false\"\n            items = self.list_files(query)\n            if not items:\n                logger.opt(colors=True).error(\n                    f\"Could not find folder '{segment}' within \"\n                    f\"parent ID '{current_folder_id}'\"\n                )\n                return None\n            current_folder_id = items[0][\"id\"]\n            logger.opt(colors=True).info(\n                f\"Found folder segment '{{}}' with ID: '{current_folder_id}'\"\n            )\n\n        return current_folder_id\n</code></pre>"},{"location":"API/api_reference/#gdrive_suite.drive.gdrive_client.GDriveClient.__init__","title":"<code>__init__(drive_config_manager)</code>","text":"<p>Initializes the GdriveService :param drive_config_manager: A ConfigManager that provides  Outh2 credentials.</p> Source code in <code>src/gdrive_suite/drive/gdrive_client.py</code> <pre><code>def __init__(self, drive_config_manager: GDriveClientConfig):\n    \"\"\"Initializes the GdriveService\n    :param drive_config_manager: A ConfigManager that provides\n     Outh2 credentials.\n    \"\"\"\n    try:\n        self._credentials: Optional[Credentials] = (\n            drive_config_manager.get_credentials()\n        )\n        self.drive_service: Any = build(\n            \"drive\", version=\"v3\", credentials=self._credentials\n        )\n        self._sheets_service: Any = build(\n            serviceName=\"sheets\", version=\"v4\", credentials=self._credentials\n        )\n\n    except RefreshError as e:\n        raise GDriveAuthError(\n            f\"Failed to refres credentials. please re-authenticate. Details: {e}\"\n        ) from e\n\n    except Exception as e:\n        raise RuntimeError(f\"Failed to initialize Google API services: {e}\") from e\n</code></pre>"},{"location":"API/api_reference/#gdrive_suite.drive.gdrive_client.GDriveClient.download_file","title":"<code>download_file(target)</code>","text":"<p>Download a file from Google Drive.</p> <p>Parameters:</p> Name Type Description Default <code>target</code> <code>DownloadTarget</code> <p>A <code>DownloadTarget</code> object specifyng what a download and where to save it.</p> required <p>Raises:     APIError: If the download fails due to a Google API error.     IOError: For local file system errors.</p> Source code in <code>src/gdrive_suite/drive/gdrive_client.py</code> <pre><code>def download_file(self, target: DownloadTarget) -&gt; None:\n    \"\"\"Download a file from Google Drive.\n\n    Args:\n        target: A `DownloadTarget` object specifyng what a download and\n            where to save it.\n    Raises:\n        APIError: If the download fails due to a Google API error.\n        IOError: For local file system errors.\n    \"\"\"\n    if target.destination_path.parent:\n        target.destination_path.parent.mkdir(parents=True, exist_ok=True)\n\n    try:\n        request = (\n            self.drive_service.files().export_media(\n                fileId=target.file_id, mimeType=target.mime_type\n            )\n            if target.mime_type\n            else self.drive_service.files().get_media(fileId=target.file_id)\n        )\n        with open(target.destination_path, \"wb\") as file_writer:\n            downloader: MediaIoBaseDownload = MediaIoBaseDownload(\n                fd=file_writer, request=request\n            )\n            _execute_download(downloader)\n\n    except HttpError as e:\n        raise APIError(\n            f\"Failed to download file '{target.destination_path.name}' (ID: {target.file_id}).\"\n            f\"Reason: {e.resp.status} {e.resp.reason}\"\n        ) from e\n    except IOError as e:\n        raise IOError(\n            f\"An expected error ocurred while downloading '{target.destination_path.name}': {e}\"\n        ) from e\n</code></pre>"},{"location":"API/api_reference/#gdrive_suite.drive.gdrive_client.GDriveClient.find_folder_id_by_path","title":"<code>find_folder_id_by_path(start_folder_id, path_segments)</code>","text":"<p>Find a folder's ID by navigating a path of folder names. Args:     start_folder_id: The ID of the folder to start from.     path_segments: A list of folder names to navigate. Return:   The ID of the folder.</p> Source code in <code>src/gdrive_suite/drive/gdrive_client.py</code> <pre><code>def find_folder_id_by_path(\n    self, start_folder_id: str, path_segments: List[str]\n) -&gt; Optional[str]:\n    \"\"\"\n    Find a folder's ID by navigating a path of folder names.\n    Args:\n        start_folder_id: The ID of the folder to start from.\n        path_segments: A list of folder names to navigate.\n    Return:\n      The ID of the folder.\n    \"\"\"\n    current_folder_id: str = start_folder_id\n    for segment in path_segments:\n        query: str = f\"'{current_folder_id}' in parents and \"\n        \"mimeType='application/vnd.google-apps.folder' and \"\n        f\"name='{segment}' and trashed=false\"\n        items = self.list_files(query)\n        if not items:\n            logger.opt(colors=True).error(\n                f\"Could not find folder '{segment}' within \"\n                f\"parent ID '{current_folder_id}'\"\n            )\n            return None\n        current_folder_id = items[0][\"id\"]\n        logger.opt(colors=True).info(\n            f\"Found folder segment '{{}}' with ID: '{current_folder_id}'\"\n        )\n\n    return current_folder_id\n</code></pre>"},{"location":"API/api_reference/#gdrive_suite.drive.gdrive_client.GDriveClient.list_files","title":"<code>list_files(query, **list_params)</code>","text":"<p>Helper function to list files in Google Drive Args:  query: A query for filtering results. See \"Search for files\"  guide for support syntax.  list_params: Additional parameters for listing files.  Return:  List of searches files.</p> <p>Raises:    APIError: If the list files fails due to Google API error.</p> Source code in <code>src/gdrive_suite/drive/gdrive_client.py</code> <pre><code>def list_files(self, query: str, **list_params: Any) -&gt; List[Dict[str, Any]]:\n    \"\"\"Helper function to list files in Google Drive\n    Args:\n     query: A query for filtering results. See \"Search for files\"\n     guide for support syntax.\n     list_params: Additional parameters for listing files.\n     Return:\n     List of searches files.\n\n     Raises:\n       APIError: If the list files fails due to Google API error.\n    \"\"\"\n    all_files: List[Dict[str, Any]] = []\n    page_token: Optional[str] = None\n    try:\n        while True:\n            response: Any = (\n                self.drive_service.files()\n                .list(\n                    spaces=\"drive\",\n                    q=query,\n                    pageToken=page_token,\n                    corpora=\"user\",\n                    fields=\"nextPageToken, files(id, name, parents, mime)\",\n                    **list_params,\n                )\n                .execute()\n            )\n            all_files.extend(response.get(\"files\", []))\n            page_token = response.get(\"nextPageToken\", None)\n\n            if page_token is None:\n                break\n        return all_files\n    except HttpError as e:\n        raise APIError(\n            f\"Failed to list files with query '{query}'. \"\n            f\"HTTP Error: {e.resp.status} {e.resp.reason}\"\n        )\n</code></pre>"},{"location":"API/api_reference/#gdrive_suite.drive.gdrive_client.GDriveClient.retrieve_file_content","title":"<code>retrieve_file_content(file_id)</code>","text":"<p>Retrieve a file from Google Drive as BytesIO object Args  file_id: Google ID of the file to get retrieve_file_content.</p> <p>Return:  BytesIO object containing the file content</p> <p>Raises:    APIError: If the retrieve fials due to Google API error.    IOError: For local file system errors.</p> Source code in <code>src/gdrive_suite/drive/gdrive_client.py</code> <pre><code>def retrieve_file_content(self, file_id: str) -&gt; io.BytesIO:\n    \"\"\"Retrieve a file from Google Drive as BytesIO object\n    Args\n     file_id: Google ID of the file to get retrieve_file_content.\n\n     Return:\n     BytesIO object containing the file content\n\n     Raises:\n       APIError: If the retrieve fials due to Google API error.\n       IOError: For local file system errors.\n    \"\"\"\n    try:\n        request = self.drive_service.files().get_media(fileId=file_id)\n        file_content: io.BytesIO = io.BytesIO()\n        downloader: MediaIoBaseDownload = MediaIoBaseDownload(\n            fd=file_content, request=request\n        )\n\n        _execute_download(downloader)\n        file_content.seek(0)\n        return file_content\n\n    except HttpError as e:\n        raise APIError(\n            f\"Failed to retrieve file content for '{file_id}'. \"\n            f\"Reason: {e.resp.status} {e.resp.reason}\"\n        ) from e\n    except IOError as e:\n        raise IOError(\n            f\"An unexpected error ocurred while retrieving content \"\n            f\"for file ID: '{file_id}': {e}\"\n        )\n</code></pre>"},{"location":"API/api_reference/#gdrive_suite.drive.gdrive_client.GDriveClient.retrieve_sheet_data","title":"<code>retrieve_sheet_data(spreadsheet_id, sheet_range)</code>","text":"<p>Read data from a Google sheet Args:      spreadsheet_id: ID for the Google sheet      sheet_range: Range of cells to read (e.j., A1: Z90)</p> <p>Returns:</p> Type Description <code>List[List[Any]]</code> <p>List of rows containing cell values</p> <p>Raises:</p> Type Description <code>APIError</code> <p>If retrieving data fails due to a Google API error.</p> Source code in <code>src/gdrive_suite/drive/gdrive_client.py</code> <pre><code>def retrieve_sheet_data(\n    self, spreadsheet_id: str, sheet_range: str\n) -&gt; List[List[Any]]:\n    \"\"\"Read data from a Google sheet\n    Args:\n         spreadsheet_id: ID for the Google sheet\n         sheet_range: Range of cells to read (e.j., A1: Z90)\n\n    Returns:\n        List of rows containing cell values\n\n    Raises:\n        APIError: If retrieving data fails due to a Google API error.\n    \"\"\"\n    try:\n        result = (\n            self._sheets_service.spreadsheets()\n            .values()\n            .get(spreadsheetId=spreadsheet_id, range=sheet_range)\n            .execute()\n        )\n        return result.get(\"values\", [])\n\n    except HttpError as e:\n        raise APIError(\n            f\"Failed to retrieve data from sheet '{spreadsheet_id}'. \"\n            f\"Reason: {e.resp.status} {e.resp.reason}\"\n        ) from e\n</code></pre>"},{"location":"API/api_reference/#gdrive_suite.drive.gdrive_client.GDriveClient.upload_file","title":"<code>upload_file(file_path, folder_id, **metadata)</code>","text":"<p>Upload file to Google Drive</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Path</code> <p>Path to the file to the upload</p> required <code>folder_id</code> <code>str</code> <p>ID of the folder to upload to</p> required <code>metadata</code> <code>Any</code> <p>Additional metadata to add the file</p> <code>{}</code> <p>Raises:</p> Type Description <code>APIError</code> <p>If upload fails due to Google API error.</p> <code>IOError</code> <p>For local file system errors.</p> Source code in <code>src/gdrive_suite/drive/gdrive_client.py</code> <pre><code>def upload_file(self, file_path: Path, folder_id: str, **metadata: Any) -&gt; str:\n    \"\"\"Upload file to Google Drive\n\n    Args:\n         file_path: Path to the file to the upload\n         folder_id: ID of the folder to upload to\n         metadata: Additional metadata to add the file\n\n    Raises:\n        APIError: If upload fails due to Google API error.\n        IOError: For local file system errors.\n    \"\"\"\n    if not file_path.is_file():\n        raise FileNotFoundError(f\"The specific file does not exist: {file_path}\")\n\n    try:\n        file_metadata = {\"name\": file_path.name, \"parents\": [folder_id], **metadata}\n        media: MediaFileUpload = MediaFileUpload(str(file_path), resumable=True)\n        response = (\n            self.drive_service.files()\n            .create(body=file_metadata, media_body=media, fields=\"id\")\n            .execute()\n        )\n        return response.get(\"id\")\n    except HttpError as e:\n        raise APIError(\n            f\"Failed to upload file {file_path.name}. \"\n            f\"Reason: {e.resp.status} {e.reason}\"\n        ) from e\n    except IOError as e:\n        raise IOError(\n            f\"An unexpected error ocurred during the upload \"\n            f\"of '{file_path.name}': {e}\"\n        ) from e\n</code></pre>"},{"location":"API/api_reference/#configuration","title":"Configuration","text":"<p>Classes responsible for managing authentication and configuration.</p>"},{"location":"API/api_reference/#gdrive_suite.drive.gdrive_client_config.GDriveClientConfig","title":"<code>gdrive_suite.drive.gdrive_client_config.GDriveClientConfig</code>","text":"<p>Handles credential management including retrieving, refreshing, and storing oauth2 credentials for Google Drive API access, both local file based and default application credentials found in a server environment.</p> Source code in <code>src/gdrive_suite/drive/gdrive_client_config.py</code> <pre><code>class GDriveClientConfig:\n    \"\"\"\n    Handles credential management including retrieving, refreshing, and\n    storing oauth2 credentials for Google Drive API access, both local file\n    based and default application credentials found in a server environment.\n    \"\"\"\n\n    def __init__(self, scopes: List[str], gdrive_settings: GDriveSettings):\n        \"\"\"Constructor for the GoogleDriveClientConfig\n\n        Args:\n            scopes: A list of OAuth2 scopers required for the application.\n            gdrive_settings: The configuration parameters for the Google Drive client.\n        Raises:\n            ConfigDirectoryError: If config_dir_path is not a valid directory.\n        \"\"\"\n        self.scopes: List[str] = scopes\n        try:\n            gdrive_settings.config_dir_path.mkdir(parents=True, exist_ok=True)\n        except OSError as e:\n            raise ConfigDirectoryError(\n                f\"Error accessing or creating config directory '{gdrive_settings.config_dir_path}': {e}\"\n            ) from e\n\n        self.token_file_path: Path = (\n            gdrive_settings.config_dir_path / gdrive_settings.token_file_name\n        )\n        self.credential_file_path: Path = (\n            gdrive_settings.config_dir_path / gdrive_settings.credentials_file_name\n        )\n\n    def _get_default_credentials(self) -&gt; Optional[Credentials]:\n        \"\"\"\n        Tries to get credentials from the application default environment.\n        This is the method used in server environments like Cloud functions.\n        \"\"\"\n        try:\n            creds, _ = google.auth.default(scopes=self.scopes)\n            if isinstance(creds, Credentials):\n                logger.opt(colors=True).success(\n                    \"Using Application Default Credentials.\"\n                )\n                return creds\n        except DefaultCredentialsError:\n            return None\n        return None\n\n    def get_credentials(self) -&gt; Optional[Credentials]:\n        \"\"\"Get valid Oauth2 credentials for Google AI access.\n\n        Attempts to load existing credentials, refresh them if expired,\n        or get new ones through the Oauth flow if necessary.\n\n        :return: Valid Google Oauth2 credentials\n        \"\"\"\n        creds: Optional[Credentials] = self._get_default_credentials()\n        if creds:\n            return creds\n\n        logger.opt(colors=True).info(\n            \"No default credentials. Attempting to load credentials from local files.\"\n        )\n\n        creds = self._load_local_token()\n\n        if creds and creds.expired:\n            logger.opt(colors=True).success(\n                \"Successfully loaded and validated local credentials.\"\n            )\n            return creds\n\n        # If we have valid creds, return them\n        if creds and creds.valid:\n            logger.opt(colors=True).success(\n                \"Successfully loaded and validated local credentials.\"\n            )\n            return creds\n\n        logger.opt(colors=True).info(\"No valid token. Starting new OAuth2 flow.\")\n        creds = self._run_oauth_flow()\n        if creds:\n            return creds\n        raise CredentialsNotFoundError(\n            \"Failed to obtain credentials. Ensure \u00b4google_credentials.json\u00b4\"\n            \" exists for local flow or that ADC are configured on the server.\"\n        )\n\n    def _load_local_token(self) -&gt; Optional[Credentials]:\n        \"\"\"Load credentials from the file toke if it exists.\n        Returns:\n            Credentials object if a token file exists, None otherwise\n        \"\"\"\n        if self.token_file_path.exists():\n            try:\n                return Credentials.from_authorized_user_file(\n                    str(self.token_file_path), self.scopes\n                )\n            except Exception as e:\n                logger.opt(colors=True).warning(\n                    f\"Could not load token from {self.token_file_path}: {e}\"\n                )\n        return None\n\n    def _save_local_token(self, creds: Credentials) -&gt; None:\n        \"\"\"Save credentials to the token file\"\"\"\n        try:\n            with open(self.token_file_path, \"w\") as token_file:\n                token_file.write(creds.to_json())\n            self.token_file_path.chmod(0o600)\n        except (OSError, IOError) as e:\n            raise GDriveAuthError(f\"Could not write token file {e}\")\n\n    def _refresh_credentials(self, creds: Credentials) -&gt; Optional[Credentials]:\n        \"\"\"Refreshes expired credentials and saves the new token.\"\"\"\n        logger.opt(colors=True).info(\n            \"Credentials expired. Attempting to refresh token.\"\n        )\n        try:\n            creds.refresh(Request())\n            logger.opt(colors=True).success(\"Successfully refreshed credentials.\")\n            return creds\n        except RefreshError as e:\n            logger.opt(colors=True).error(\n                f\"Token refresh failed: {e}. A new login is required.\"\n            )\n            if self.token_file_path.exists():\n                self.token_file_path.unlink()\n            return None\n\n    def _run_oauth_flow(self) -&gt; Optional[Credentials]:\n        \"\"\"\n        Runs the interactive OAuth2 flow to obtain new credentials.\n        \"\"\"\n        if not self.credential_file_path.exists():\n            logger.opt(colors=True).warning(\n                f\"Cannot start OAuth flow: secrets file not found at '{self.credential_file_path}\"\n            )\n            return None\n\n        try:\n            flow: InstalledAppFlow = InstalledAppFlow.from_client_secrets_file(\n                client_secrets_file=str(self.credential_file_path), scopes=self.scopes\n            )\n            creds_from_flow: Optional[CredentialsTypes] = flow.run_local_server(port=0)\n\n            if isinstance(creds_from_flow, Credentials):\n                creds = cast(Credentials, creds_from_flow)\n                self._save_local_token(creds)\n                logger.opt(colors=True).success(\n                    \"Successfully obtained new credentials via OAuth2 flow.\"\n                )\n                return creds\n            else:\n                logger.opt(colors=True).error(\n                    f\"OAuth2 flow returned and unexpected credential type: {type(creds_from_flow)}\"\n                )\n                return None\n\n        except Exception as e:\n            logger.opt(colors=True).error(\n                f\"An error ocurred during the OAuth2 flow: {e}\"\n            )\n            return None\n</code></pre>"},{"location":"API/api_reference/#gdrive_suite.drive.gdrive_client_config.GDriveClientConfig.__init__","title":"<code>__init__(scopes, gdrive_settings)</code>","text":"<p>Constructor for the GoogleDriveClientConfig</p> <p>Parameters:</p> Name Type Description Default <code>scopes</code> <code>List[str]</code> <p>A list of OAuth2 scopers required for the application.</p> required <code>gdrive_settings</code> <code>GDriveSettings</code> <p>The configuration parameters for the Google Drive client.</p> required <p>Raises:     ConfigDirectoryError: If config_dir_path is not a valid directory.</p> Source code in <code>src/gdrive_suite/drive/gdrive_client_config.py</code> <pre><code>def __init__(self, scopes: List[str], gdrive_settings: GDriveSettings):\n    \"\"\"Constructor for the GoogleDriveClientConfig\n\n    Args:\n        scopes: A list of OAuth2 scopers required for the application.\n        gdrive_settings: The configuration parameters for the Google Drive client.\n    Raises:\n        ConfigDirectoryError: If config_dir_path is not a valid directory.\n    \"\"\"\n    self.scopes: List[str] = scopes\n    try:\n        gdrive_settings.config_dir_path.mkdir(parents=True, exist_ok=True)\n    except OSError as e:\n        raise ConfigDirectoryError(\n            f\"Error accessing or creating config directory '{gdrive_settings.config_dir_path}': {e}\"\n        ) from e\n\n    self.token_file_path: Path = (\n        gdrive_settings.config_dir_path / gdrive_settings.token_file_name\n    )\n    self.credential_file_path: Path = (\n        gdrive_settings.config_dir_path / gdrive_settings.credentials_file_name\n    )\n</code></pre>"},{"location":"API/api_reference/#gdrive_suite.drive.gdrive_client_config.GDriveClientConfig.get_credentials","title":"<code>get_credentials()</code>","text":"<p>Get valid Oauth2 credentials for Google AI access.</p> <p>Attempts to load existing credentials, refresh them if expired, or get new ones through the Oauth flow if necessary.</p> <p>:return: Valid Google Oauth2 credentials</p> Source code in <code>src/gdrive_suite/drive/gdrive_client_config.py</code> <pre><code>def get_credentials(self) -&gt; Optional[Credentials]:\n    \"\"\"Get valid Oauth2 credentials for Google AI access.\n\n    Attempts to load existing credentials, refresh them if expired,\n    or get new ones through the Oauth flow if necessary.\n\n    :return: Valid Google Oauth2 credentials\n    \"\"\"\n    creds: Optional[Credentials] = self._get_default_credentials()\n    if creds:\n        return creds\n\n    logger.opt(colors=True).info(\n        \"No default credentials. Attempting to load credentials from local files.\"\n    )\n\n    creds = self._load_local_token()\n\n    if creds and creds.expired:\n        logger.opt(colors=True).success(\n            \"Successfully loaded and validated local credentials.\"\n        )\n        return creds\n\n    # If we have valid creds, return them\n    if creds and creds.valid:\n        logger.opt(colors=True).success(\n            \"Successfully loaded and validated local credentials.\"\n        )\n        return creds\n\n    logger.opt(colors=True).info(\"No valid token. Starting new OAuth2 flow.\")\n    creds = self._run_oauth_flow()\n    if creds:\n        return creds\n    raise CredentialsNotFoundError(\n        \"Failed to obtain credentials. Ensure \u00b4google_credentials.json\u00b4\"\n        \" exists for local flow or that ADC are configured on the server.\"\n    )\n</code></pre>"},{"location":"API/api_reference/#gdrive_suite.context.models.GDriveSettings","title":"<code>gdrive_suite.context.models.GDriveSettings</code>  <code>dataclass</code>","text":"<p>Configuration parameters for Google Drive client.</p> <p>Attributes:</p> Name Type Description <code>config_dir_path</code> <code>Path</code> <p>Path to the configuration directory where the token and credentials files are stored.</p> <code>token_file_name</code> <code>str</code> <p>The filename for the stored user token.</p> <code>credentials_file_name</code> <code>str</code> <p>The filename for the client secret file.</p> Source code in <code>src/gdrive_suite/context/models.py</code> <pre><code>@dataclass(frozen=True)\nclass GDriveSettings:\n    \"\"\"\n    Configuration parameters for Google Drive client.\n\n    Attributes:\n        config_dir_path: Path to the configuration directory where the token and credentials files are stored.\n        token_file_name: The filename for the stored user token.\n        credentials_file_name: The filename for the client secret file.\n    \"\"\"\n\n    config_dir_path: Path\n    token_file_name: str\n    credentials_file_name: str\n</code></pre>"},{"location":"API/api_reference/#gdrive_suite.context.models.DownloadTarget","title":"<code>gdrive_suite.context.models.DownloadTarget</code>  <code>dataclass</code>","text":"<p>Specifies the parameters for a file download operation</p> <p>Attributes:</p> Name Type Description <code>file_id</code> <code>str</code> <p>The unique ID of the file on Google Drive.</p> <code>destination_path</code> <code>Path</code> <p>The full local path(including filename) wjere file will be saved.</p> <code>mime_type</code> <code>Optional[str]</code> <p>An optional MIME type to convert a Google Workspace to a different format upon download (e.g., 'application/pdf').</p> Source code in <code>src/gdrive_suite/context/models.py</code> <pre><code>@dataclass(frozen=True)\nclass DownloadTarget:\n    \"\"\"\n    Specifies the parameters for a file download operation\n\n    Attributes:\n        file_id: The unique ID of the file on Google Drive.\n        destination_path: The full local path(including filename) wjere\n            file will be saved.\n        mime_type: An optional MIME type to convert a Google Workspace\n            to a different format upon download (e.g., 'application/pdf').\n    \"\"\"\n\n    file_id: str\n    destination_path: Path\n    mime_type: Optional[str]\n</code></pre>"},{"location":"API/api_reference/#exceptions","title":"Exceptions","text":"<p>Custom exceptions raised by the library.</p>"},{"location":"API/api_reference/#gdrive_suite.gdrive_exceptions.GDriveSuiteError","title":"<code>gdrive_suite.gdrive_exceptions.GDriveSuiteError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base Exception for all errors rised by the gdrive-suite library.</p> Source code in <code>src/gdrive_suite/gdrive_exceptions.py</code> <pre><code>class GDriveSuiteError(Exception):\n    \"\"\"Base Exception for all errors rised by the gdrive-suite library.\"\"\"\n\n    pass\n</code></pre>"},{"location":"API/api_reference/#gdrive_suite.gdrive_exceptions.GDriveAuthError","title":"<code>gdrive_suite.gdrive_exceptions.GDriveAuthError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for authentication errors in this module.</p> Source code in <code>src/gdrive_suite/gdrive_exceptions.py</code> <pre><code>class GDriveAuthError(Exception):\n    \"\"\"Base exception for authentication errors in this module.\"\"\"\n\n    pass\n</code></pre>"},{"location":"API/api_reference/#gdrive_suite.gdrive_exceptions.CredentialsNotFoundError","title":"<code>gdrive_suite.gdrive_exceptions.CredentialsNotFoundError</code>","text":"<p>               Bases: <code>GDriveAuthError</code></p> <p>Raised when no valid credentials can be found or generated.</p> Source code in <code>src/gdrive_suite/gdrive_exceptions.py</code> <pre><code>class CredentialsNotFoundError(GDriveAuthError):\n    \"\"\"Raised when no valid credentials can be found or generated.\"\"\"\n\n    pass\n</code></pre>"},{"location":"API/api_reference/#gdrive_suite.gdrive_exceptions.ConfigDirectoryError","title":"<code>gdrive_suite.gdrive_exceptions.ConfigDirectoryError</code>","text":"<p>               Bases: <code>GDriveAuthError</code></p> <p>Raised for issues related to the configuration directory.</p> Source code in <code>src/gdrive_suite/gdrive_exceptions.py</code> <pre><code>class ConfigDirectoryError(GDriveAuthError):\n    \"\"\"Raised for issues related to the configuration directory.\"\"\"\n\n    pass\n</code></pre>"},{"location":"API/api_reference/#gdrive_suite.gdrive_exceptions.APIError","title":"<code>gdrive_suite.gdrive_exceptions.APIError</code>","text":"<p>               Bases: <code>GDriveSuiteError</code></p> <p>Raised when an API call to a Google service fails.</p> <p>This exception abstracts away the underlying 'googleapiclient.http.HttpError' providing a consisteng error type for all API interactions within the suite.</p> Source code in <code>src/gdrive_suite/gdrive_exceptions.py</code> <pre><code>class APIError(GDriveSuiteError):\n    \"\"\"Raised when an API call to a Google service fails.\n\n    This exception abstracts away the underlying 'googleapiclient.http.HttpError'\n    providing a consisteng error type for all API interactions within the suite.\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"API/usage_examples/","title":"Usage Examples","text":""},{"location":"API/usage_examples/#basic-usage-download-a-file","title":"Basic Usage: Download a file","text":"<p>This example shows how to initialize the client and download a file.</p> <pre><code>from pathlib import Path\nfrom gdrive_suite import (\n  GDriveClient,\n  GDriveClientConfig,\n  DownloadTarget,\n  GDriveSettings\n)\n# --- 1. Configuration ---\n# Define the path to your configuration directory\nCONFIG_DIR = Path(\"conf/local\")\n\n# Define the required API scopes\n# .readonly is safer if you only need to read files\nGOOGLE_SCOPES = [\n    [\"https://www.googleapis.com/auth/drive.readonly, https://www.googleapis.com/auth/drive.file\"]\n    # Needed for uploads/modifications\n]\n\n# --- 2. Initialization ---\n# Create the settings object\ngdrive_settings: GDriveSettings(\n  config_dir=CONFIG_DIR,\n  token_file_name = \"google_token.json\",\n  credentials_file_name = \"google_credentials.json\",\n)\n# Create a configuration object\ngdrive_config = GDriveClientConfig(\n    scope=GOOGLE_SCOPES,\n    gdrive_settings=gdrive_settings\n)\n\n# Create the GDriveClient instance\ngdrive_client = GDriveClient(gdrive_config)\n\n# --- 3. Download a file ---\n# Specify the target to download the file\ntarget = DownloadTarget (\n  file_id = \"some_file_id\",\n  destination_path = Path(\"data/destinatio_dir/myfile.csv\"),\n  mime_type = None\n)\n\nprint(f\"Downloading '{file_name}'...\")\ngdrive_client.download_file(\n  target\n)\nprint(f\"File successfully downloaded to '{download_dir}'\")\n</code></pre>"},{"location":"API/usage_examples/#data-professional-workflow-load-a-google-sheet-into-pandas","title":"Data Professional Workflow: Load a Google Sheet into Pandas","text":"<p>A common task for data analysts is to pull the latest version of a report from Google Drive. This example shows how to find a Google Sheet by its path and load its contents directly into a pandas DataFrame.</p> <pre><code>import pandas as pd\nfrom pathlib import Path\nfrom gdrive_suite.drive import GDriveClient, GDriveClientConfig\nfrom gdrive_suite.context import GDriveSettings\n\n# --- Initialization (same as above) ---\nCONFIG_DIR = Path(\"conf/local\")\nGOOGLE_SCOPES = [\n    [\"https://www.googleapis.com/auth/drive.readonly, https://www.googleapis.com/auth/drive.file\"]\n]\ngdrive_settings = GDriveSettings(\n  config_dir=CONFIG_DIR,\n  token_file_name=\"google_token.json\",\n  credentials_file_name=\"google_credentials.json\"\n)\ngdrive_config = GDriveClientConfig(GOOGLE_SCOPES, gdrive_settings)\ngdrive_client = GDriveClient(gdrive_config)\n\n# --- Find and load the sheet ---\ntry:\n    # Find the folder ID by navigating from the root ('root')\n    # This is more robust than hard coding folder IDs\n    folder_path = [\"Sales Reports\", \"2025\", \"Q3\"]\n    target_folder_id = gdrive_client.find_folder_id_by_path(\n        start_folder_id=\"root\",\n        path_segments=folder_path\n    )\n\n    if target_folder_id:\n        # Now, list files in that folder to find our report\n        query = f\"'{target_folder_id}' in parents and name='Q3 Sales Summary'\"\n        files = gdrive_client.list_files(query)\n\n        if files:\n            sheet_file = files[0]\n            print(f\"Found file: {sheet_file['name']} (ID: {sheet_file['id']})\")\n\n            # Retrieve the data from the first sheet (tab)\n            sheet_data = gdrive_client.retrieve_sheet_data(\n                spreadsheet_id=sheet_file['id'],\n                sheet_range=\"Sheet1\" # Reads the entire sheet\n            )\n\n            if sheet_data:\n                # Convert to a pandas DataFrame\n                df = pd.DataFrame(sheet_data[1:], columns=sheet_data[0])\n                print(\"\\nSuccessfully loaded data into DataFrame:\")\n                print(df.head())\n            else:\n                print(\"Sheet contains no data.\")\n        else:\n            print(\"Could not find the specified file in the target folder.\")\n\nexcept (IOError, ValueError) as e:\n    print(f\"An error occurred: {e}\")\n</code></pre>"}]}